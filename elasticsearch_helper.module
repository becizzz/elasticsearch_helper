<?php

/**
 * @file
 * This module provides tools to integrate elasticsearch with Drupal.
 */

require drupal_get_path('module', 'elasticsearch_helper') . '/vendor/autoload.php';


/**
 * Implements hook_entity_insert().
 */
function elasticsearch_helper_menu() {
  $items['admin/config/search/elasticsearch_helper'] = [
    'title' => 'Elasticsearch Helper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elasticsearch_helper_settings_form'),
    'access arguments' => array('configure elasticsearch helper'),
    'file' => 'elasticsearch_helper.admin.inc',
  ];

  return $items;
}


/**
 * Return a configured and usable elasticsearch client.
 */
function elasticsearch_helper_get_client() {
  static $elasticsearch_helper__client;

  if (! isset($elasticsearch_helper__client)) {
    require drupal_get_path('module', 'elasticsearch_helper') . "/src/ElasticsearchClientBuilder.php";
    $builder = new ElasticsearchClientBuilder();
    $elasticsearch_helper__client = $builder->build();
  }

  return $elasticsearch_helper__client;
}

/**
 * Return a configured and usable elasticsearch index processor.
 */
function elasticsearch_helper_get_index_processor() {
  static $elasticsearch_helper__index_processor;

  if (! isset($elasticsearch_helper__processor)) {
    require_once drupal_get_path('module', 'elasticsearch_helper') . "/src/ElasticsearchIndexManager.php";
    $elasticsearch_helper__index_processor = new ElasticsearchIndexManager();
  }

  return $elasticsearch_helper__index_processor;
}

/**
 * Implements hook_entity_insert().
 */
function elasticsearch_helper_entity_insert($entity, $type) {
  if (variable_get('elasticsearch_helper_defer_indexing', FALSE)) {
    $entity_ids = entity_extract_ids($type, $entity);
    DrupalQueue::get('elasticsearch_helper_indexing')
      ->createItem([
        'entity_type' => $type,
        'entity_id' => $entity_ids[0],
      ]);
  }
  else {
    elasticsearch_helper_get_index_processor()->indexEntity($entity, $type);
  }
}

/**
 * Implements hook_entity_update().
 */
function elasticsearch_helper_entity_update($entity, $type) {
  elasticsearch_helper_entity_insert($entity, $type);
}

/**
 * Implements hook_entity_delete().
 */
function elasticsearch_helper_entity_delete($entity, $type) {
  elasticsearch_helper_get_index_processor()->deleteEntity($entity, $type);
}


/**
 * Implements hook_ctools_plugin_type().
 */
function elasticsearch_helper_ctools_plugin_type() {
  return array(
    'elasticsearch_helper_index' => array(
      'label' => 'Elasticsearch Index Plugin',
      'use hooks' => FALSE,
      'process' => 'elasticsearch_helper_index_plugin'
    )
  );
}

/**
 * Process callback of the ctools plugin type.
 */
function elasticsearch_helper_index_plugin(&$plugin, $info) {
  drupal_alter('elasticsearch_helper_index_plugin', $plugin, $info);
}

/**
 * Helper to extract the (entity) id from serialized data. It's currently hard
 * coded to return a node id.
 */
function _elasticsearch_helper_get_id($data, $id_key = 'nid') {
  // We'll need proper "what's the id key of this entity" magic here

  if (isset($data[$id_key]) && (is_string($data[$id_key]) || is_numeric($data[$id_key]))) {
    // If there is an attribute with the key 'id', use it.
    return $data[$id_key];
  }
  else {
    // Elasticsearch will generate its own id.
    return NULL;
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function elasticsearch_helper_cron_queue_info() {
  return [
    'elasticsearch_helper_indexing' => [
      'worker callback' => 'elasticsearch_helper_queue_worker',
      'time' => 60,
    ],
  ];
}

/**
 * Indexing queue worker callback.
 *
 * @param $data
 */
function elasticsearch_helper_queue_worker($data) {
  $entity = entity_load_single($data['entity_type'], $data['entity_id']);
  elasticsearch_helper_get_index_processor()->indexEntity($entity, $data['entity_type']);
}